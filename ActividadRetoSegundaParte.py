# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HViQvwumPLKdSotYVKq4EdOR4dZbv3De
"""

!pip install control

# Instalar la librería control (solo necesario en Google Colab)
!pip install control

# Importaciones
import numpy as np
import matplotlib.pyplot as plt
import control as ctrl

# ---------------------
# DEFINICIÓN DEL SISTEMA
# ---------------------
num = [3]
den = [1, 2, 3]
delay = 0.1  # segundos

# ---------------------
# TIEMPO Y SEÑAL DE ENTRADA
# ---------------------
ts = 0.1
t = np.arange(0, 50 + ts, ts)
N = len(t)

# Segmentos para la señal de entrada
size_short = int(N * 0.1)  # 5 s
size_med = int(N * 0.1)    # 5 s
size_mid = int(N * 0.2)    # 10 s
size_mod = int(N * 0.2)    # 10 s
size_long = N - (4 * size_med + size_short)  # 20 s

# Construcción de los segmentos
s1 = np.zeros(size_short)
s2 = np.linspace(0, 5, size_med)
s3 = np.ones(size_mid) * 5
s4 = np.ones(size_mod) * 10
s5 = np.linspace(25, 15, size_long)

# Concatenar la señal de entrada
arbsig = np.concatenate((s1, s2, s3, s4, s5))

# Asegurar misma longitud que t
if len(arbsig) < len(t):
    arbsig = np.append(arbsig, [arbsig[-1]] * (len(t) - len(arbsig)))
elif len(arbsig) > len(t):
    arbsig = arbsig[:len(t)]

# ---------------------
# FUNCIÓN DE TRANSFERENCIA CON RETARDO (PADE)
# ---------------------
G_nodelay = ctrl.tf(num, den)
G_delay_num, G_delay_den = ctrl.pade(delay, 1)  # Pade orden 1
G_total = ctrl.series(ctrl.tf(G_delay_num, G_delay_den), G_nodelay)

# ---------------------
# SIMULACIÓN
# ---------------------
# Simulación
t_out, y_out = ctrl.forced_response(G_total, T=t, U=arbsig)


# Opcional: Visualizar el retardo explícitamente
delay_steps = int(delay / ts)
y_visual = np.concatenate((np.zeros(delay_steps), y_out[:-delay_steps]))

# ---------------------
# GRÁFICAS
# ---------------------
plt.figure(figsize=(10, 6))
plt.plot(t, arbsig, 'k--', label='Señal aleatoria', linewidth=2)
plt.plot(t, y_visual, 'r', label='Salida del sistema aplicado una señal arbitraria', linewidth=2)
#plt.title('Sistema con retardo de 2s (Python con control)')
plt.xlabel('Tiempo [s]')
plt.ylabel('Amplitud')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()